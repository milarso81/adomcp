name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_NOLOGO: true

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --configuration Release --no-restore --verbosity minimal

    - name: Check code formatting
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run unit tests
      run: dotnet test --configuration Release --no-build --verbosity minimal --collect:"XPlat Code Coverage" --results-directory coverage

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/**/*.xml
          **/TestResults/**/*.trx

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-reports
        path: coverage/**/coverage.cobertura.xml

    - name: Generate coverage report
      if: github.event_name == 'pull_request'
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: coverage/**/coverage.cobertura.xml
        badge: true
        fail_below_min: false
        format: markdown
        hide_branch_rate: false
        hide_complexity: true
        indicators: true
        output: both
        thresholds: '60 80'

    - name: Add coverage PR comment
      if: github.event_name == 'pull_request'
      uses: marocchino/sticky-pull-request-comment@v2
      with:
        recreate: true
        path: code-coverage-results.md
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    permissions:
      actions: read
      contents: read
      security-events: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Run security audit
      run: dotnet list package --vulnerable --include-transitive 2>/dev/null || echo "No vulnerable packages found or audit not available"

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: csharp
        config-file: ./.github/codeql/codeql-config.yml
      continue-on-error: true

    - name: Build for CodeQL
      run: dotnet build --configuration Release --no-restore

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      continue-on-error: true

  package:
    name: Package Application
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Restore dependencies
      run: dotnet restore

    - name: Publish AdoMCP
      run: dotnet publish src/AdoMCP/AdoMCP.csproj --configuration Release --output ./publish/adomcp --self-contained false

    - name: Publish BuildErrorDebugger
      run: dotnet publish src/BuildErrorDebugger/BuildErrorDebugger.csproj --configuration Release --output ./publish/debugger --self-contained false

    - name: Upload AdoMCP artifact
      uses: actions/upload-artifact@v4
      with:
        name: adomcp-package
        path: ./publish/adomcp/

    - name: Upload BuildErrorDebugger artifact
      uses: actions/upload-artifact@v4
      with:
        name: builderrordebugger-package
        path: ./publish/debugger/

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: false
        tags: adomcp:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Test Docker image
      run: |
        docker run --rm adomcp:latest --help || echo "Help command test completed"

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Dependency Review
      uses: actions/dependency-review-action@v4
      with:
        fail-on-severity: moderate
        allow-licenses: MIT, Apache-2.0, BSD-2-Clause, BSD-3-Clause, ISC
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [build-and-test]
    if: always() && (needs.build-and-test.result == 'success')
    
    steps:
    - name: Check quality gate
      run: |
        echo "✅ Build and tests passed"
        echo "✅ All required quality checks passed"
        echo "Note: Security scan runs independently and won't block this gate"
